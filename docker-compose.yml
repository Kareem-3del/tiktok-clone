version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: tiktok-clone-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tiktok_clone
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tiktok-clone-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: tiktok-clone-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - tiktok-clone-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: tiktok-clone-minio
    restart: unless-stopped
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - tiktok-clone-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tiktok-clone-backend
    restart: unless-stopped
    ports:
      - '3001:3000'
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: tiktok_clone
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: 'false'
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_VIDEO_BUCKET: videos
      MINIO_THUMBNAIL_BUCKET: thumbnails
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 7d
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - tiktok-clone-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tiktok-clone-frontend
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001/api/v1
      NEXT_PUBLIC_VIDEO_BUFFER_PREVIOUS: 2
      NEXT_PUBLIC_VIDEO_BUFFER_NEXT: 3
      NEXT_PUBLIC_VIDEO_PRELOAD: metadata
      NEXT_PUBLIC_ENABLE_PROGRESSIVE_STREAMING: 'true'
      NEXT_PUBLIC_VIDEO_INITIAL_CHUNK: 3
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - tiktok-clone-network

  createbuckets:
    image: minio/mc:latest
    container_name: tiktok-clone-createbuckets
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/videos --ignore-existing;
      mc mb myminio/thumbnails --ignore-existing;
      mc anonymous set public myminio/videos;
      mc anonymous set public myminio/thumbnails;
      exit 0;
      "
    networks:
      - tiktok-clone-network

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  tiktok-clone-network:
    driver: bridge
